from machine import Pin, SPI
from time import sleep_us, sleep
import machine
from machine import Timer
from machine import RTC
import time

machine.freq(160000000)
'''
display_buffer = [
    b'\x00\x00\x00\x00\x00\x00\x00\x00', 
    b'\x00\x00\x00\x00\x00\x00\x00\x00', 
    b'\x0e\x00\x00\x00\x00\x00\x00\x00', 
    b'\x0f\x00\x00\x00\x00\x00\x00\x00', 
    b'\x1b\x00\x00\x00\x00\x00\x00\x00', 
    b'\x18\x00\x00\x00\x00\x00\x00\x00', 
    b'\x1e\x00\x00\x00\x00\x00\x00\x00', 
    b'\x1f\x00\x00\x00\x00\x00\x00\x00', 
    b'\x1b\x00\x00\x00\x00\x00\x00\x00', 
    b'\x1b\x00\x00\x00\x00\x00\x00\x00', 
    b'\x1b\x00\x00\x00\x00\x00\x00\x00', 
    b'\x1b\x00\x00\x00\x00\x00\x00\x00', 
    b'\x1f\x00\x00\x00\x00\x00\x00\x00', 
    b'\x0e\x00\x00\x00\x00\x00\x00\x00', 
    b'\x00\x00\x00\x00\x00\x00\x00\x00', 
    b'\x00\x00\x00\x00\x00\x00\x00\x00'
]'''

'''
inp = [    0x00, 0x00, 
    0x00, 0x00, 
    0x0e, 0x00, 
    0x1f, 0x00, 
    0x1b, 0x00, 
    0x1b, 0x00, 
    0x1b, 0x00, 
    0x1b, 0x00, 
    0x1f, 0x00, 
    0x1f, 0x00, 
    0x03, 0x00, 
    0x1b, 0x00, 
    0x1e, 0x00, 
    0x1e, 0x00, 
    0x00, 0x00, 
    0x00, 0x00]

ou = []
for x in range(32):
    if x%2 == 0:
        ou.append(inp[x])
print(ou)
'''

class matrix:
    
    #R1 = Pin(33, Pin.OUT)
    #R2 = Pin(25, Pin.OUT)
    #G1 = Pin(0, Pin.OUT)
    #G2 = Pin(16, Pin.OUT)
    #B1 = Pin(32, Pin.OUT)
    #B2 = Pin(13, Pin.OUT)
    hspi = machine.SPI(2, 10000000, firstbit=SPI.MSB) # mosi->p13 as B2
    
    #R1.off()
    #R2.off()
    #G1.off()
    #G2.off()
    #B1.off()

    A = Pin(15, Pin.OUT)
    B = Pin(2, Pin.OUT)
    C = Pin(5, Pin.OUT)
    D = Pin(4, Pin.OUT)

    A.off()
    B.off()
    C.off()
    D.off()
    
    #CLK = Pin(18, Pin.OUT) CLK is hspi clk @ 10MHz
    OE  = Pin(16, Pin.OUT)
    LAT = Pin(17, Pin.OUT)

    OE.on() # active low
    LAT.off()
    
    
    def __init__(self):
        self.buffer = [bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'),
                  bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'),
                  bytearray(b'\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'),
                  bytearray(b'\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'),
                  bytearray(b'\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'),
                  bytearray(b'\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'),
                  bytearray(b'\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'),
                  bytearray(b'\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'),
                  bytearray(b'\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'),
                  bytearray(b'\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'),
                  bytearray(b'\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'),
                  bytearray(b'\x1b\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'),
                  bytearray(b'\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'),
                  bytearray(b'\x0e\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'),
                  bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00'),
                  bytearray(b'\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00')]
        
        self.table =[[0, 0, 14, 31, 27, 27, 27, 27, 27, 27, 27, 27, 31, 14, 0, 0],
                [0, 0, 6, 14, 30, 6, 6, 6, 6, 6, 6, 6, 31, 31, 0, 0],
                [0, 0, 14, 31, 27, 27, 27, 3, 6, 14, 13, 27, 31, 31, 0, 0],
                [0, 0, 14, 31, 27, 27, 7, 14, 7, 3, 27, 27, 31, 30, 0, 0],
                [0, 0, 6, 6, 14, 14, 14, 30, 26, 31, 31, 6, 15, 15, 0, 0],
                [0, 0, 31, 31, 24, 24, 30, 31, 3, 3, 27, 27, 31, 14, 0, 0],
                [0, 0, 14, 15, 27, 24, 30, 31, 27, 27, 27, 27, 31, 14, 0, 0],
                [0, 0, 31, 31, 27, 22, 6, 6, 6, 12, 12, 12, 12, 12, 0, 0],
                [0, 0, 14, 31, 27, 27, 31, 14, 31, 27, 27, 27, 31, 14, 0, 0],
                [0, 0, 14, 31, 27, 27, 27, 27, 31, 31, 3, 27, 30, 14, 0, 0]]
        
        self.bigfonts = [[0, 0, 0, 0, 0, 0, 15, 31, 30, 60, 60, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 120, 60, 60, 30, 31, 15, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 240, 248, 120, 60, 60, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 60, 60, 120, 248, 224, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 1, 7, 31, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 7, 31, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 192, 224, 252, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 15, 30, 56, 120, 120, 124, 124, 56, 0, 0, 0, 0, 1, 3, 7, 15, 30, 60, 56, 112, 127, 127, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 240, 248, 60, 60, 28, 28, 28, 60, 60, 120, 120, 240, 224, 192, 128, 0, 14, 14, 14, 28, 252, 252, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 15, 63, 56, 56, 56, 56, 0, 0, 0, 1, 7, 1, 0, 0, 0, 0, 120, 120, 120, 120, 62, 31, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 240, 248, 120, 60, 60, 60, 60, 60, 120, 240, 224, 248, 60, 60, 30, 30, 30, 30, 60, 60, 248, 240, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 1, 3, 7, 7, 14, 30, 28, 56, 56, 112, 240, 255, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 112, 240, 240, 240, 240, 240, 112, 112, 112, 112, 112, 112, 112, 112, 112, 255, 112, 112, 112, 112, 248, 254, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 31, 31, 56, 56, 56, 56, 56, 57, 63, 63, 60, 56, 0, 0, 0, 56, 120, 120, 120, 120, 62, 15, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 252, 252, 0, 0, 0, 0, 0, 192, 248, 248, 60, 60, 30, 30, 30, 30, 30, 28, 60, 60, 248, 240, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 7, 15, 30, 60, 56, 56, 120, 120, 127, 127, 126, 124, 120, 120, 120, 120, 120, 120, 60, 62, 31, 15, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 248, 252, 60, 60, 56, 0, 0, 0, 248, 252, 60, 30, 30, 30, 30, 30, 30, 30, 30, 60, 120, 240, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 63, 63, 56, 112, 112, 112, 0, 0, 0, 0, 1, 1, 3, 3, 3, 7, 7, 7, 7, 7, 7, 7, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 254, 254, 28, 28, 56, 120, 112, 240, 224, 224, 192, 192, 192, 192, 128, 128, 128, 128, 128, 128, 128, 128, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 15, 63, 56, 120, 112, 120, 120, 124, 63, 31, 15, 31, 60, 120, 112, 112, 112, 112, 112, 120, 62, 15, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 240, 248, 60, 28, 30, 30, 30, 28, 60, 248, 240, 248, 252, 60, 30, 30, 30, 30, 30, 60, 248, 240, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 15, 62, 60, 120, 120, 112, 112, 112, 112, 120, 120, 124, 63, 31, 0, 0, 0, 24, 60, 60, 63, 31, 0, 0, 0, 0],
                [0, 0, 0, 0, 0, 0, 240, 248, 60, 60, 28, 30, 30, 30, 30, 62, 62, 126, 254, 254, 30, 60, 60, 60, 120, 120, 240, 224, 0, 0, 0, 0]]
        
        self.smallNum = [[['0', '1', '1', '0'], ['0', '1', '1', '0'], ['1', '0', '0', '1'], ['1', '0', '0', '1'], ['1', '0', '0', '1'], ['1', '0', '0', '1'], ['1', '0', '0', '1'], ['1', '0', '0', '1'], ['1', '0', '0', '1'], ['0', '1', '1', '0'], ['0', '1', '1', '0']],
                         [['0', '0', '1', '0'], ['0', '1', '1', '0'], ['0', '0', '1', '0'], ['0', '0', '1', '0'], ['0', '0', '1', '0'], ['0', '0', '1', '0'], ['0', '0', '1', '0'], ['0', '0', '1', '0'], ['0', '0', '1', '0'], ['0', '0', '1', '0'], ['0', '1', '1', '1']],
                         [['0', '1', '1', '0'], ['1', '0', '0', '1'], ['1', '0', '0', '1'], ['1', '0', '0', '1'], ['0', '0', '0', '1'], ['0', '0', '1', '0'], ['0', '0', '1', '0'], ['0', '1', '0', '0'], ['0', '1', '0', '0'], ['1', '0', '0', '1'], ['1', '1', '1', '1']],
                         [['0', '1', '1', '0'], ['1', '0', '0', '1'], ['1', '0', '0', '1'], ['0', '0', '0', '1'], ['0', '0', '1', '0'], ['0', '1', '1', '0'], ['0', '0', '1', '0'], ['0', '0', '0', '1'], ['1', '0', '0', '1'], ['1', '0', '0', '1'], ['0', '1', '1', '0']],
                         [['0', '0', '1', '0'], ['0', '0', '1', '0'], ['0', '0', '1', '0'], ['0', '1', '1', '0'], ['0', '1', '1', '0'], ['0', '1', '1', '0'], ['1', '0', '1', '0'], ['1', '1', '1', '1'], ['0', '0', '1', '0'], ['0', '0', '1', '0'], ['0', '1', '1', '1']],
                         [['1', '1', '1', '1'], ['1', '0', '0', '0'], ['1', '0', '0', '0'], ['1', '0', '0', '0'], ['1', '1', '1', '0'], ['1', '0', '1', '0'], ['0', '0', '0', '1'], ['0', '0', '0', '1'], ['1', '0', '0', '1'], ['1', '0', '1', '0'], ['0', '1', '1', '0']],
                         [['0', '1', '1', '0'], ['0', '1', '1', '0'], ['1', '0', '0', '0'], ['1', '0', '0', '0'], ['1', '1', '1', '0'], ['1', '1', '0', '1'], ['1', '0', '0', '1'], ['1', '0', '0', '1'], ['1', '0', '0', '1'], ['0', '1', '0', '1'], ['0', '1', '1', '0']],
                         [['1', '1', '1', '1'], ['1', '0', '0', '1'], ['0', '0', '1', '0'], ['0', '0', '1', '0'], ['0', '0', '1', '0'], ['0', '0', '1', '0'], ['0', '1', '0', '0'], ['0', '1', '0', '0'], ['0', '1', '0', '0'], ['0', '1', '0', '0'], ['0', '1', '0', '0']],
                         [['0', '1', '1', '0'], ['1', '0', '0', '1'], ['1', '0', '0', '1'], ['1', '0', '0', '1'], ['0', '1', '1', '0'], ['0', '1', '1', '0'], ['0', '1', '1', '0'], ['1', '0', '0', '1'], ['1', '0', '0', '1'], ['1', '0', '0', '1'], ['0', '1', '1', '0']],
                         [['0', '1', '1', '0'], ['1', '0', '1', '0'], ['1', '0', '0', '1'], ['1', '0', '0', '1'], ['1', '0', '0', '1'], ['1', '0', '1', '1'], ['0', '1', '1', '1'], ['0', '0', '0', '1'], ['0', '0', '0', '1'], ['0', '1', '1', '0'], ['0', '1', '1', '0']]]
    
    def makeHex(self, num):
        hs = num // 100
        ts = (num % 100) // 10
        os = num % 10

        finalNum = []
        for i in range(11):
            l1 = s.smallNum[hs][i] +['0'] + s.smallNum[ts][i]+ ['0'] + s.smallNum[os][i] + ['0', '0']
            #print(l1)
            str_ = ''.join(l1[0:8])
            num1 = int(str_, 2)
            str_ = ''.join(l1[8:])
            num2 = int(str_, 2)

            finalNum.append([num1, num2])
            
        return finalNum
    
    def swap(self, pos, num):
        for x in range(16):
            self.buffer[x][pos]= self.table[num][x]
    
    def swapLow(self, l):
        for x in range(11):
            self.buffer[x][6] = l[x][0]
            self.buffer[x][7] = l[x][1]
            
    def swapHigh(self, l):
        for x in range(11):
            self.buffer[x][14] = l[x][0]
            self.buffer[x][15] = l[x][1]
            
    
    def bigswap(self, pos, num):
        for x in range(16):
            self.buffer[x][pos]= self.bigfonts[num][x+16]
            self.buffer[x][pos+8]= self.bigfonts[num][x]
            self.buffer[x][pos+1] = self.bigfonts[num+1][x+16]
            self.buffer[x][pos+8+1] = self.bigfonts[num+1][x]
            
    def writeBuffer(self, num):
        hs = num//100
        ts = (num%100)//10
        os = num %10
        #hs = 0
        #ts = 2
        #os = 3
        
        self.bigswap(0, 2*hs)
        self.bigswap(2, 2*ts)
        self.bigswap(4, 2*os)
        #self.swap(0, hs)
        #self.swap(1, ts)
        #self.swap(2, os)
    
    def writeBufferLow(self, num=402): #write number to screen buffer on the right lower corner, total attempts
        self.swapLow(self.makeHex(num))
    
    def writeBufferHigh(self, num=305): #write number to screen buffer on the right upper corner, percentage
        self.swapHigh(self.makeHex(num))
        
    
    def select_line_b(self, d,c,b,a):
        
        #ID = (num&0x8)>>3
        #IC = (num&0x4)>>2
        #IB = (num&0x2)>>1
        #IA = (num&0x1)>>0
        
        #self.A.value(IA)
        #self.B.value(IB)
        #self.C.value(IC)
        #self.D.value(ID)
        
        self.A.value(a)
        self.B.value(b)
        self.C.value(c)
        self.D.value(d)
    
    def select_line(self, num):
        
        ID = (num&0x8)>>3
        IC = (num&0x4)>>2
        IB = (num&0x2)>>1
        IA = (num&0x1)>>0
        
        self.A.value(IA)
        self.B.value(IB)
        self.C.value(IC)
        self.D.value(ID)

    def display(self):
        c = 0
        b = 0
        a = 0
        for x in range(480):
            #if b == 320:
             #   self.swap(0, a%10)
             #   b = 0
              #  a += 1
            for y in self.buffer:
                #print(type(x))
                self.select_line(c%16)
                c+=1
                self.hspi.write(y)
                self.LAT.on()
                self.LAT.off()
                self.OE.off()
                sleep_us(10)
                self.OE.on()
            #b+= 1
                #if c == 16:
                 #   c = 0
            #end of 1 frame
            #b += 1
                 
        
    def DisplayOn(self):
        c = 0

        for y in self.buffer:
            self.select_line(c%16)
            c+=1
            self.hspi.write(y)
            self.LAT.on()
            self.LAT.off()
            self.OE.off()
            sleep_us(100)
            self.OE.on()

#========================test==================================

start = time.ticks_ms()
s = matrix()
#delta = time.ticks_diff(time.ticks_ms(), start)
#print(delta)
for i in range(1000):
    #if i%100 == 0:
        
    s.writeBufferLow(num = i)
        #s.writeBufferHigh()
    #if i%10 == 0:
    s.writeBuffer(i)
    s.DisplayOn()
    #s.swap(0, i%10)
delta = time.ticks_diff(time.ticks_ms(), start)
    #print(delta)
    #s.display()
    #sleep(1)
print(delta)
    
#a = 0
#def callback(pin):
#    timer2 = Timer(2)
#    timer2.init(period=25, mode=Timer.ONE_SHOT, callback= lambda t: spress())
    
#def spress():
    #global table
    #global s
#    global a
    #print('call back')
#   s.swap(0, a%10)
#    a +=1

#pb1 = Pin(15, Pin.IN, Pin.PULL_UP)
#pb1.irq(trigger=Pin.IRQ_FALLING,handler = callback)

#s.display()
#delta = time.ticks_diff(time.ticks_ms(), start)
#print(delta)

